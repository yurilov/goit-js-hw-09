{"version":3,"sources":["js/02-timer.js"],"names":["Timer","constructor","targetDate","creatingFaceClock","timerStart","getDataForTimer","time","Date","now","days","Math","floor","hours","minutes","seconds","faceClock","document","querySelector","refs","daysSpan","hoursSpan","minsSpan","secsSpan","textContent","String","padStart","deadline","parse","startForTimer","setInterval","clearInterval","dateTimePicker","startTimerRef","nextElementSibling","startTimerHandler","value","addEventListener"],"mappings":";AAAA,MAAMA,EACJC,aAAY,WAAEC,IACPA,KAAAA,WAAaA,EACbC,KAAAA,oBACAC,KAAAA,aAGPC,kBACQC,MAAAA,EAAO,KAAKJ,WAAaK,KAAKC,MAM7B,MAAA,CACLF,KAAAA,EACAG,KAPWC,KAAKC,MAAML,EAAQ,OAQ9BM,MAPYF,KAAKC,MAAOL,EAAQ,MAAyB,MAQzDO,QAPcH,KAAKC,MAAOL,EAAQ,KAAoB,KAQtDQ,QAPcJ,KAAKC,MAAOL,EAAQ,IAAc,MAWpDH,oBACQY,MAAAA,EAAYC,SAASC,cAAc,UAEnCC,EAAO,CACXC,SAAUJ,EAAUE,cAAe,eACnCG,UAAWL,EAAUE,cAAe,gBACpCI,SAAUN,EAAUE,cAAe,kBACnCK,SAAUP,EAAUE,cAAe,mBAGrCC,EAAKC,SAASI,YAAcC,OAAO,KAAKnB,kBAAkBI,MAAMgB,SAAS,EAAG,KAE5EP,EAAKE,UAAUG,YAAcC,OAAO,KAAKnB,kBAAkBO,OAAOa,SAAS,EAAG,KAE9EP,EAAKG,SAASE,YAAcC,OAAO,KAAKnB,kBAAkBQ,SAASY,SAAS,EAAG,KAE/EP,EAAKI,SAASC,YAAcC,OAAO,KAAKnB,kBAAkBS,SAASW,SAAS,EAAG,KAGjFrB,aACQsB,MAAAA,EAAWnB,KAAKoB,MAAM,KAAKzB,aAAeK,KAAKoB,MAAM,IAAIpB,MAC1DqB,KAAAA,cAAgBC,YAAY,KAC3BH,EACFI,cAAc,KAAKF,eAIhBzB,KAAAA,qBACJ,MAIP,MAAM4B,EAAiBf,SAASC,cAAc,oBAExCe,EAAgBD,EAAeE,mBAErC,SAASC,IACO,IAAIlC,EAAM,CAAEE,WAAY,IAAIK,KAAKwB,EAAeI,SAGhEH,EAAcI,iBAAiB,QAASF","file":"02-timer.d851a9a6.js","sourceRoot":"../src","sourcesContent":["class Timer {\n  constructor({ targetDate }) {\n    this.targetDate = targetDate;\n    this.creatingFaceClock();\n    this.timerStart();\n  }\n\n  getDataForTimer() {\n    const time = this.targetDate - Date.now();\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((time % (1000 * 60)) / 1000);\n\n    return {\n      time,\n      days,\n      hours,\n      minutes,\n      seconds,\n    };\n  }\n\n  creatingFaceClock() {\n    const faceClock = document.querySelector('.timer');\n\n    const refs = {\n      daysSpan: faceClock.querySelector(`[data-days]`),\n      hoursSpan: faceClock.querySelector(`[data-hours]`),\n      minsSpan: faceClock.querySelector(`[data-minutes]`),\n      secsSpan: faceClock.querySelector(`[data-seconds]`),\n    };\n\n    refs.daysSpan.textContent = String(this.getDataForTimer().days).padStart(2, '0');\n\n    refs.hoursSpan.textContent = String(this.getDataForTimer().hours).padStart(2, '0');\n\n    refs.minsSpan.textContent = String(this.getDataForTimer().minutes).padStart(2, '0');\n\n    refs.secsSpan.textContent = String(this.getDataForTimer().seconds).padStart(2, '0');\n  }\n\n  timerStart() {\n    const deadline = Date.parse(this.targetDate) <= Date.parse(new Date());\n    this.startForTimer = setInterval(() => {\n      if (deadline) {\n        clearInterval(this.startForTimer);\n        return;\n      }\n\n      this.creatingFaceClock();\n    }, 1000);\n  }\n}\n\nconst dateTimePicker = document.querySelector('#datetime-picker');\n\nconst startTimerRef = dateTimePicker.nextElementSibling;\n\nfunction startTimerHandler() {\n  const timer = new Timer({ targetDate: new Date(dateTimePicker.value) });\n}\n\nstartTimerRef.addEventListener('click', startTimerHandler);\n"]}